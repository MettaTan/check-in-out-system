<%- include("../partials/header") %>
<style>
  ::placeholder {
    text-transform: none;
  }
  #cover {
    position: fixed;
    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    text-align: center;
    background-color: white;
    z-index: 99;
  }
  #nric,
  #fullName,
  #dept,
  #PIN,
  #maskedNric {
    text-transform: uppercase;
  }
  .tableButton {
    vertical-align: middle;
    text-align: right;
  }
  #progress-bar {
    width: 0%;
  }
</style>
<div class="container w-75 mt-5">
  <div class="card" style="border: none; box-shadow: 20px 20px 40px -6px rgba(0, 0, 0, 0.1);">
  <div class="card-body">
  <h4><u>Personnel Particulars &amp; Passphrase Authentication</u></h4>
  <h5>Please include all relevant information.</h5>
  <hr />
  <form id="form" method="post" action="/checkin" autocomplete="off">
    <div class="row g-3" id="particulars-form">
      <div class="form-group col-md-6">
        <label class="form-label" for="nric">NRIC</label>
        <input
          class="form-control"
          id="nric"
          name="dept[nric]"
          type="text"
          placeholder="Full Unmasked NRIC"
          maxlength="9"
          onkeyup="upper(this)"
        />
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">
          Please enter <strong>Full <u>Unmasked</u></strong> NRIC (e.g.
          'S1234567A').
        </div>
      </div>
      <div class="form-group col-md-6">
        <label class="form-label" for="fullName">Full Name</label>
        <input
          class="form-control"
          id="fullName"
          name="dept[fullName]"
          type="text"
          placeholder="Full Name"
          onkeyup="upper(this)"
        />
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please enter your Full Name.</div>
      </div>
      <div class="form-group col-md-6">
        <label class="form-label" for="dept">Department</label>
        <input
          class="form-control"
          id="dept"
          name="dept[dept]"
          type="text"
          placeholder="Department Name"
          maxlength="10"
          onkeyup="upper(this)"
        />
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please enter Department name.</div>
      </div>
      <div class="form-group col-md-6">
        <label class="form-label" for="contact">Contact No.</label>
        <div class="input-group">
          <span class="input-group-text">+65</span>
          <input
            class="form-control"
            id="contact"
            name="dept[contact]"
            type="text"
            placeholder="Contact No."
            maxlength="8"
          />
          <div class="valid-feedback">Looks good!</div>
          <div class="invalid-feedback">Please enter Contact no..</div>
        </div>
      </div>
      <div class="form-group col-md-12">
        <label class="form-label" for="purpose">Purpose</label>
        <select class="form-select" id="purpose" name="dept[purpose]">
          <option selected value="" disabled>Select an option...</option>
          <option value="Access Special Purpose Lab">
            Access Special Purpose Lab
          </option>
          <option value="Access File Room">Access File Room</option>
          <option value="Access Warehouse">Access Warehouse</option>
          <option value="Visit Gallery of Artefacts">
            Visit Gallery of Artefacts
          </option>
          <option value="Loan/Return Equipment">Loan/Return Equipment</option>
        </select>
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please select an option.</div>
      </div>
      <input id="timeIn" name="dept[timeIn]" type="hidden" />
      <div class="col-md-12" id="pass-div" hidden>
        <hr />
        <table class="table">
          <thead>
            <tr>
              <th scope="col">S/N</th>
              <th scope="col">Passphrase</th>
              <th scope="col">PIN</th>
              <th scope="col"></th>
            </tr>
          </thead>
          <tbody id="pass-tbody"></tbody>
          <tfoot>
            <th scope="row" colspan="4">
              <button
                class="btn btn-outline-secondary btn-sm w-100"
                id="add-pass-row"
                type="button"
              >
                Add Passphrase Entry
              </button>
            </th>
          </tfoot>
        </table>
        <hr />
      </div>
      <div class="form-group col-md-6" id="loan-div" hidden>

        <label class="form-label" for="loan">Category of equipment to be loaned/returned</label>
        <select class="form-select" id="loan" name="pass[passphrase][]">
          <option selected value="Multimedia Devices">
            Multimedia Devices
          </option>
          <option value="Storage Devices">Storage Devices</option>
          <option value="Loan/Return Equipment">Miscellaneous</option>
        </select>
       
        <!-- <label class="form-label" for="loan">Item(s) to be loaned/returned</label>
        <input
          class="form-control"
          id="loan"
          name="pass[passphrase][]"
          type="text"
          placeholder="Item(s) to be loaned/returned"
        />
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please enter item(s) to be loaned/returned..</div>-->
       
      </div>
      <div class="col-md-12">
        <div class="progress">
          <div
            class="progress-bar bg-success progress-bar-striped progress-bar-animated"
            id="progress-bar"
          ></div>
        </div>
      </div>
      <div class="col-md-6">
        <a class="btn btn-info btn-lg w-100" type="button" href="/"
          >Go Back</a
        >
      </div>
      <div class="col-md-6">
        <button
          class="btn btn-outline-primary btn-lg w-100"
          id="particulars-submit"
          type="button"
          data-bs-toggle="modal"
          data-bs-target="#team-modal"
          disabled
        >
          Next Page
        </button>
      </div>
      <div
        class="modal fade"
        id="team-modal"
        data-bs-backdrop="static"
        data-bs-keyboard="false"
        tabindex="-1"
      >
        <div class="modal-dialog modal-dialog-scrollable modal-xl">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">
                Team Members Details (EXCLUDING Team Leader)
              </h5>
              <button
                class="btn-close"
                type="button"
                data-bs-dismiss="modal"
              ></button>
            </div>
            <div class="modal-body" id="team-div">
              <h6>
                Please include relevant information of
                <strong>ALL</strong> personnel (Developers, Researchers,
                Assistants, etc.) in the team.
              </h6>
              <hr />
              <table class="table">
                <thead>
                  <tr>
                    <th scope="col">S/N</th>
                    <th scope="col">Name</th>
                    <th scope="col">Masked NRIC</th>
                    <th scope="col"></th>
                  </tr>
                </thead>
                <tbody id="team-tbody"></tbody>
                <tfoot>
                  <th scope="row" colspan="4">
                    <button
                      class="btn btn-outline-secondary btn-sm w-100"
                      id="add-team-row"
                      type="button"
                    >
                      Add Team Member Entry
                    </button>
                  </th>
                </tfoot>
              </table>
            </div>
            <div class="modal-footer">
              <button
                class="btn btn-outline-danger me-auto"
                type="button"
                data-bs-dismiss="modal"
              >
                Previous Page
              </button>
              <button
                class="btn btn-info"
                id="team-submit"
                type="button"
                data-bs-toggle="modal"
                data-bs-target="#terms0-modal"
              >
                Next Page
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      class="modal fade"
      id="terms0-modal"
      data-bs-backdrop="static"
      data-bs-keyboard="false"
      tabindex="-1"
    >
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              Notes to personnel entering Mettacademy Labs
            </h5>
            <button
              class="btn-close"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#team-modal"
            ></button>
          </div>
          <div class="modal-body">
            <h6>
              <ol>
                <li>
                  <strong><u>NO</u></strong> smoking in the
                  <u>Administrative Area</u> and <u>Restricted Zone</u> of Mettacademy
                  <strong><u>AT ALL TIMES</u></strong
                  >.
                </li>
                <li>
                  <strong><u>ALL</u></strong> contraband items are
                  <u>to be surrendered</u> before entering Restricted Zone.
                  (Refer to the next page for list of Contraband Items)
                </li>
                <li>
                  Personnel are to be accompanied by an escort while 
                  travelling to and from the Restricted Zone
                  <strong><u>AT ALL TIMES</u></strong
                  >.
                </li>
                <li>
                  Non-compliance with this declaration will result in your team
                  being <u>blacklisted by Mettacademy</u>!
                </li>
              </ol>
            </h6>
            <hr />
            <div class="form-check">
              <input
                class="form-check-input is-invalid"
                id="terms0-check"
                type="checkbox"
                value=""
              />
              <label class="form-check-label" for="terms0-check"
                >I acknowledge to all of the above.</label
              >
              <div class="invalid-feedback">Please check to continue.</div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              class="btn btn-outline-primary me-auto"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#team-modal"
            >
              Previous Page
            </button>
            <button
              class="btn btn-info"
              id="terms0-submit"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#terms1-modal"
              disabled
            >
              Next Page
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      class="modal fade"
      id="terms1-modal"
      data-bs-backdrop="static"
      data-bs-keyboard="false"
      tabindex="-1"
    >
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">List of Contraband Items</h5>
            <button
              class="btn-close"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#terms0-modal"
            ></button>
          </div>
          <div class="modal-body">
            <h6>
              <ol>
                <li>
                  Any unauthorised <u>electronics</u> or <u>telecommunications equipment</u>.
                </li>
                <li><u>Cigarettes</u>, <u>Lighters</u> and <u>Matches</u>.</li>
                <li><u>Weapons</u> and <u>Firearms</u>.</li>
                <li>Any <u>food items</u> or <u>sweet drinks</u>.</li>
                <li>
                  ALL other <u>flammable items/liquids</u>.
                </li>
              </ol>
              <img
                src="/assets/contraband.jpg"
                alt="Contraband Items"
                style="
                  display: block;
                  width: 400px;
                  height: auto;
                  display: block;
                "
              />
            </h6>
            <hr />
            <div class="form-check">
              <input
                class="form-check-input is-invalid"
                id="terms1-check"
                type="checkbox"
                value=""
              />
              <label class="form-check-label" for="terms1-check"
                >I acknowledge to all of the above.</label
              >
              <div class="invalid-feedback">Please check to continue.</div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              class="btn btn-outline-primary me-auto"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#terms0-modal"
            >
              Previous Page
            </button>
            <button
              class="btn btn-info"
              id="terms1-submit"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#signature-modal"
              disabled
            >
              Next Page
            </button>
          </div>
        </div>
      </div>
    </div>
    <div
      class="modal fade"
      id="signature-modal"
      data-bs-backdrop="static"
      data-bs-keyboard="false"
      tabindex="-1"
    >
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Declaration By Team Leader</h5>
            <button
              class="btn-close"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#terms1-modal"
            ></button>
          </div>
          <div class="modal-body">
            <h6>
              I, as the Team Leader, hereby declare that I have
              <strong><u>read and understood</u></strong> the aforementioned
              procedures. <br />I have <strong><u>briefed</u></strong> my Team
              Members on <strong><u>ALL</u></strong> the
              aforementioned procedures have and will
              <strong><u>ensure</u></strong> that said procedures will be
              adhered to fully. <br />I will be held
              <strong><u>fully responsible</u></strong> for any Non-Compliance
              of procedures.
            </h6>
            <hr />
            <div class="container">
              <div class="row g-3">
                <div class="form-group col-md-12">
                  <label class="form-label" for="signature">Signature</label>
                  <canvas class="border" id="sig-canvas"></canvas>
                  <button
                    class="btn btn-outline-secondary btn-sm w-100"
                    id="signature-clear"
                    type="button"
                  >
                    Clear Signature
                  </button>
                  <input
                    id="signature"
                    name="signature[signatureIn]"
                    type="hidden"
                  />
                  <div class="invalid-feedback">Please sign.</div>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              class="btn btn-info me-auto"
              type="button"
              data-bs-toggle="modal"
              data-bs-target="#terms1-modal"
            >
              Previous Page
            </button>
            <button class="btn btn-primary text-light" id="submit-button" type="button">
              <strong>Submit</strong>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
  </form>
</main>

<script src="/javascripts/canvas.js"></script>
<script>
  // Variable declarations
  let { loan, ...formInputs } = Object.fromEntries(
    Array.from(
      document.querySelectorAll(
        "#particulars-form input, #particulars-form select"
      )
    ).map((element) => [element.id, element])
  );

  const {
      cover,
      form,
      pass_div,
      pass_tbody,
      add_pass_row,
      loan_div,
      progress_bar,
      particulars_submit,
      team_div,
      team_tbody,
      add_team_row,
      team_submit,
      terms0_check,
      terms0_submit,
      terms1_check,
      terms1_submit,
      signature_modal,
      signature_clear,
      signature,
      submit_button,
    } = Object.fromEntries(
      Array.from(document.querySelectorAll("[id]")).map((element) => [
        element.id.replace(/-/g, "_"),
        element,
      ])
    ),
    signature_canvas = document.getElementById("sig-canvas");

  // Function definitions
  const upper = (event) => (event.value = event.value.toUpperCase());

  // Client-side form validation
  const regExPatterns = {
    nric: /^[STFG]\d{7}[A-Z]$/i,
    fullName: /^\w+([\w ]+)*$/i,
    dept: /^\w+([\w ]+)*$/i,
    contact: /^(6|8|9)\d{7}$/i,
    maskedNric: /^\d{3}[A-Z]$/i,
  };

  const validateValue = (id, value) => regExPatterns[id].test(value);

  const validationState = (boolean) => {
    return boolean ? "is-valid" : "is-invalid";
  };

  const checkValidation = (id, value) => {
    switch (id) {
      case "nric":
      case "fullName":
      case "dept":
      case "contact":
      case "maskedNric":
        return `form-control ${validationState(validateValue(id, value))}`;
      case "timeIn":
      case "loan":
      case "signature":
        return `form-control ${validationState(value !== "")}`;
      case "purpose":
        return `form-select ${validationState(value !== "")}`;
      default:
        return "";
    }
  };

  const isValidCount = (elementArr) => {
    return elementArr.filter((element) =>
      element.classList.contains("is-valid")
    ).length;
  };

  const particularsSubmitProgress = () => {
    const { timeIn, ...inputsObj } = formInputs;

    const inputsArr = Object.values(inputsObj),
      passArr = Array.from(pass_tbody.querySelectorAll("#passphrase, #PIN"));
      
    let validCount = isValidCount(inputsArr),
      totalCount = inputsArr.length;
    /*
    if (
      ["Access Special Purpose Lab"].includes(formInputs.purpose.value) && passArr.length >= 6
    ) {
      console.log("case 1")
      validCount += isValidCount(passArr);
      totalCount += passArr.length === 0 ? 2 : passArr.length;
    } else if (
      ["Access File Room"].includes(formInputs.purpose.value) && passArr.length >= 4
    ) {
      console.log("case 2")
      validCount += isValidCount(passArr);
      totalCount += passArr.length === 0 ? 2 : passArr.length;
    } else if (
      ["Access Warehouse"].includes(formInputs.purpose.value) && passArr.length >= 2
    ) {
      console.log("case 3")
      validCount += isValidCount(passArr);
      totalCount += passArr.length === 0 ? 2 : passArr.length;
    }
    */
    

    if (
      [
        "Access Special Purpose Lab",
        "Access File Room",
        "Access Warehouse",
      ].includes(formInputs.purpose.value)
    ) {
      validCount += isValidCount(passArr);
      totalCount += passArr.length === 0 ? 2 : passArr.length;
    }
  

    particulars_submit.disabled = validCount < totalCount;
    progress_bar.style.width = `${(validCount / totalCount) * 100}%`;
  };

  const validate = (id) => {
    formInputs[id].className = checkValidation(id, formInputs[id].value);
    particularsSubmitProgress();
  };

  const isValidated = (element) => {
    return ["is-valid", "is-invalid"].some((state) =>
      element.classList.contains(state)
    );
  };

  // Purpose select scripting
  const hide = (div) => (div.hidden = true),
    show = (div) => (div.hidden = false);

  const formExpand = () => {
    hide(pass_div);
    delete formInputs.loan;
    hide(loan_div);
    switch (formInputs.purpose.value) {
      case "Access Special Purpose Lab":
      case "Access File Room":
      case "Access Warehouse":
        show(pass_div);
        break;
      case "Loan/Return Equipment":
        formInputs = { ...formInputs, ...{ loan: loan } };
        show(loan_div);
      default:
    }
  };

  // Table scripting
  const appendRow = (rowElements, tbody) => {
    const newRow = tbody.insertRow(-1);

    rowElements.forEach((element, index) => {
      newRow.insertCell(index);
      newRow.cells[index].outerHTML = element;
    });
  };

  const deleteRow = (event) => {
    const parentTr = event.target.parentNode.parentNode;

    parentTr.parentNode.removeChild(parentTr);
  };

  const resetRowNo = (tbody) => {
    Array.from(tbody.querySelectorAll("tr")).forEach((element, index) => {
      element.querySelector("strong").innerText = index + 1;
    });
  };

  const passElements = [
      `<th scope="row">
			<button class="btn btn-light" type="button" disabled><strong></strong></button>
		</th>`,
      `<td class="input-group">
			<input class="form-control" id="passphrase" name="pass[passphrase][]" type="text" placeholder="Passphrase" maxlength="32">
			<div class="invalid-feedback"><strong>Invalid passphrase!</strong></div>
		</td>`,
      `<td>
			<input class="form-control" id="PIN" name="pass[PIN][]" type="text" placeholder="PIN" maxlength="4" onkeyup="upper(this)">
			<div class="invalid-feedback"><strong>Invalid PIN!</strong></div>
		</td>`,
      `<td class="tableButton">
			<button class="btn-close" type="button"></button>
		</td>`,
    ],
    teamElements = [
      `<th scope="row">
				<button class="btn btn-light" type="button" disabled><strong></strong></button>
			</th>`,
      `<td>
				<input class="form-control" id="fullName" name="dept[teamFullName][]" type="text" placeholder="Full Name" onkeyup="upper(this)">
				<div class="invalid-feedback">Please enter your Full Name.</div>
			</td>`,
      `<td>
				<input class="form-control" id="maskedNric" name="dept[teamNric][]" type="text" placeholder="Masked NRIC (e.g. '567A')" maxlength="4" onkeyup="upper(this)">
				<div class="invalid-feedback">Please enter <strong><u>Masked</u></strong> NRIC (e.g. '567A').</div>
			</td>`,
      `<td class="tableButton">
				<button class="btn-close" type="button"></button>
			</td>`,
    ];

  // Passphrase-PIN validation 'stores data in client side'
  const getPass = async () => {
    const res = await fetch("/checkin/getPass", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });

    return await res.json();
  };
  const promise = getPass();

  let passData;

  promise.then((pass) => (passData = pass));

  const parsePassInputs = (rowIndex) => {
    const tr = pass_tbody.rows[rowIndex];

    const passphrase = tr.querySelector("#passphrase"),
      PIN = tr.querySelector("#PIN");

    if (passphrase.value.length < 15) {
      passphrase.className = "form-control";
      PIN.className = "form-control";
    } else if (passphrase.classList.contains("is-valid"))
      PIN.className = `form-control${
        PIN.value.length < 4
          ? ""
          : ` ${validationState(
              PIN.value.toUpperCase() === passData[passphrase.value]
            )}`
      }`;
    else {
      passphrase.className = `form-control ${validationState(
        passphrase.value in passData
      )}`;
      PIN.className = `form-control${
        PIN.value.length < 4
          ? ""
          : ` ${validationState(
              PIN.value.toUpperCase() === passData[passphrase.value]
            )}`
      }`;
    }

    particularsSubmitProgress();
  };

  // Team validation
  const validateTeam = () => {
    const teamInputs = Array.from(
      team_tbody.querySelectorAll("#fullName, #maskedNric")
    );

    team_submit.disabled = isValidCount(teamInputs) < teamInputs.length;
  };

  // Terms validation
  const validateTerms = (checkbox, submitButton) => {
    submitButton.disabled = !checkbox.checked;
    checkbox.className = `form-check-input ${validationState(
      checkbox.checked
    )}`;
  };

  // Canvas scripting
  const submitProgress = () => {
    signature.className = checkValidation("signature", signature.value);
    submit_button.disabled = !signature.classList.contains("is-valid");
  };

  const clearCanvas = () => {
    signature_canvas.width = signature_clear.offsetWidth;
    signature_canvas.height = (signature_clear.offsetWidth / 4) * 1;
    signature.value = "";
    submitProgress();
  };

  const processCanvas = () => {
    signature.value = signature_canvas.toDataURL();
    submitProgress();
  };

  // Initialize values
  formInputs.timeIn.value = moment().format("DD-MM-YYYY HH:mm");
  validate(formInputs.timeIn.id);

  // Event listeners
  document.onreadystatechange = () => {
    cover.style.display = "none";
  };

  Object.keys({ ...formInputs, ...{ loan: loan } }).forEach((id) => {
    const element = id === "loan" ? loan : formInputs[id];

    element.addEventListener("keyup", () => {
      validate(id);
      if (id === "purpose") formExpand();
    });
  });
  formInputs.purpose.addEventListener("click", () => {
    validate(formInputs.purpose.id);
    formExpand();
  });

  pass_div.addEventListener("click", (event) => {
    if (event.target === add_pass_row) appendRow(passElements, pass_tbody);
    else if (event.target.classList.contains("btn-close")) deleteRow(event);
    resetRowNo(pass_tbody);
    particularsSubmitProgress();
  });

  pass_tbody.addEventListener("input", async (event) => {
    const element = event.target;

    if (["passphrase", "PIN"].includes(element.id)) {
      const rowIndex = element.parentNode.parentNode.rowIndex - 1;

      await parsePassInputs(rowIndex);
    }
  });

  team_div.addEventListener("click", (event) => {
    if (event.target === add_team_row) appendRow(teamElements, team_tbody);
    else if (event.target.classList.contains("btn-close")) deleteRow(event);
    resetRowNo(team_tbody);
    validateTeam();
  });

  team_tbody.addEventListener("keyup", (event) => {
    const element = event.target;

    if (["fullName", "maskedNric"].includes(element.id)) {
      element.className = checkValidation(element.id, element.value);
      validateTeam();
    }
  });

  terms0_check.addEventListener("change", () =>
    validateTerms(terms0_check, terms0_submit)
  );

  terms1_check.addEventListener("change", () =>
    validateTerms(terms1_check, terms1_submit)
  );

  signature_modal.addEventListener("shown.bs.modal", () => clearCanvas());

  signature_clear.addEventListener("click", () => clearCanvas());

  signature_canvas.addEventListener("mouseup", () => processCanvas());

  submit_button.addEventListener("click", () => {
    if (formInputs.purpose.value !== "Loan/Return Equipment")
      loan.parentNode.removeChild(loan);
    form.submit();
  });
</script>
