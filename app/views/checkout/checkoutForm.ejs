<%- include("../partials/header") %>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>

<style>
	::placeholder {
		text-transform: none;
	}
	#cover {
		position: fixed;
		display: block;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		text-align: center;
		background-color: white;
		z-index: 99;
	}
	#scan-input {
		opacity: 0;
	}
	#nric {
		text-transform: uppercase;
	}
	#sig-canvas {
		width: 100%;
	}
	#progress-bar {
		width: 0%;
	}
	.selectedRadio {
		border: 1px solid black !important;
	}
</style>
<main class="container w-75 mt-4">
	<div class="card" style="width: 100%;">
		<div class="card-body">
	<h4><u>Personnel Particulars</u></h4>
	<h5>Please check your particulars and sign.</h5>
	<hr>
	<form method="post" action="/checkout" autocomplete="off">
		<div class="row g-3" id="particulars-form">
	
			<div class="form-group col-md-6">
				<label class="form-label" for="nric">NRIC</label>
				<input class="form-control" id="nric" name="dept[nric]" type="text" placeholder="Full Unmasked NRIC" maxlength="9" onkeyup="upper(this)">
				<div class="valid-feedback">Looks good!</div>
				<div class="invalid-feedback" id="nric-invalid-feedback"></div>
			</div>
			<div class="form-group col-md-6">
				<label class="form-label" for="fullName">Full Name</label>
				<input class="form-control" id="fullName" name="dept[fullName]" type="text" placeholder="Full Name" disabled>
			</div>
			<div class="form-group col-md-6">
				<label class="form-label" for="dept">Department</label>
				<input class="form-control" id="dept" name="dept[dept]" type="text" placeholder="Department Name" maxlength="10" disabled>
			</div>
			<div class="form-group col-md-6">
				<label class="form-label" for="contact">Contact No.</label>
				<div class="input-group">
					<span class="input-group-text">+65</span>
					<input class="form-control" id="contact" name="dept[contact]" type="text" placeholder="Contact No." maxlength="8" disabled>
				</div>
			</div>
			<div class="form-group col-md-12">
				<label class="form-label" for="purpose">Purpose</label>
				<select class="form-select" id="purpose" name="dept[purpose]" disabled>
					<option selected value="" disabled>Select an option...</option>
					<option value="Access Special Purpose Lab">Access Special Purpose Lab</option>
					<option value="Access File Room">Access File Room</option>
					<option value="Access Warehouse">Access Warehouse</option>
					<option value="Visit Gallery of Artefacts">Visit Gallery of Artefacts</option>
					<option value="Loan/Return Equipment">Loan/Return Equipment</option>
				</select>
			</div>
			<input id="timeIn" name="dept[timeIn]" type="hidden">
			<input id="timeOut" name="dept[timeOut]" type="hidden">
			<div class="form-group col-md-12">
				<label class="form-label" for="signature">Signature</label>
				<canvas class="border" id="sig-canvas"></canvas>
				<button class="btn btn-outline-danger btn-sm w-100" id="signature-clear" type="button">Clear Signature</button>
				<input id="signature" name="signature[signatureOut]" type="hidden">
				<div class="invalid-feedback">Please sign.</div>
			</div>
			<div class="col-md-12">
				<div class="progress">
					<div class="progress-bar bg-success progress-bar-striped progress-bar-animated" id="progress-bar"></div>
				</div>
			</div>
			<div class="col-md-6">
				<a class="btn btn-danger btn-lg w-100" type="button" href="/">Go Back</a>
			</div>
			<div class="col-md-6">
				<button class="btn btn-outline-success btn-lg w-100" id="particulars-submit" type="button" data-bs-toggle="modal" data-bs-target="#feedback-modal" disabled>Next Page</button>
			</div>
		</div>
		<div class="modal fade" id="feedback-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
			<div class="modal-dialog modal-dialog-scrollable modal-xl">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Customer Feedback Form</h5>
						<button class="btn-close" type="button" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<div class="container">
							<div class="row g-3">
								<% Object.keys(feedbackSelect).forEach((key,i) => { %>
									<div class="form-group col-md-<%= feedbackSelect[key].col %>">
										<label class="feedback<%= i %> form-label" for="<%= key %>"><%= feedbackSelect[key].label %></label>
										<div class="btn-group" id="<%= key %>">
											<% feedbackSelect[key].values.forEach((value, index) => { %>
												<input class="btn-check" id="<%= `${key}${index}` %>" name="feedback[<%= key %>]" type="radio" value="<%= value %>">
												<label class="btn btn-outline-dark" for="<%= `${key}${index}` %>"><%= value %></label>
											<% }) %>
										</div>
									</div>
								<% }); %>
								<% Object.keys(feedBackQuestions).forEach((key) => { %>
									<div class="form-group col-md-12">
										<label class="form-label" for="<%= key %>"><%= feedBackQuestions[key] %></label>
										<div class="btn-group" id="<%= key %>">
											<% ["Yes", "No"].forEach((condition) => { %>
												<input class="btn-check" id="<%= `${key}${condition}` %>" name="feedback[<%= key %>]" type="radio" value="<%= condition %>">
												<label class="btn btn-outline-dark" for="<%= `${key}${condition}` %>"><%= condition %></label>
											<% }); %>
										</div>
										<input class="form-control mt-1" id="<%= key %>Comment" name="feedback[<%= key %>Comment]" type="hidden" placeholder="Please elaborate (required)">
									</div>
								<% }); %>
								<div class="form-group col-md-12">
									<label class="form-label" for="comment">Any other comments on our service or potential areas of improvement?</label>
									<input class="form-control" id="comment" name="feedback[comment]" type="text">
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button class="btn btn-outline-danger me-auto" type="button" data-bs-dismiss="modal">Close</button>
						<button class="btn btn-success" id="submit" type="submit" disabled>Submit</button>
					</div>
				</div>
			</div>
		</div>
	</form>
	<div class="modal fade" id="scan-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">ID Card Scanner</h5>
					<button class="btn-close" type="button" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body">
					<label class="form-label" for="scan-input"><strong>Scan ID Card:</strong></label>
					<input class="form-control form-control-sm" id="scan-input" type="text" value="" autocomplete="off" autofocus>
				</div>
			</div>
		</div>
	</div>
	<div class="modal fade" id="loading-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-sm">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Checking database...</h5>
					<button class="btn-close" type="button" data-bs-dismiss="modal"></button>
				</div>
				<div class="modal-body d-flex justify-content-center mb-1">
						<div class="spinner-border"></div>
				</div>
			</div>
		</div>
	</div>
	</div>
	</div>
</main>
<%- include("../partials/footer") %>
<script src="/javascripts/canvas.js"></script>
<script>
	document.getElementById("wait0").addEventListener("click",(e) =>clearWait(e.target.value));
	document.getElementById("wait1").addEventListener("click",(e) =>clearWait(e.target.value));
	document.getElementById("wait2").addEventListener("click",(e) =>addReason(e.target.value));

	document.getElementById("time0").addEventListener("click",(e) =>clearTime(e.target.value));
	document.getElementById("time1").addEventListener("click",(e) =>clearTime(e.target.value));
	document.getElementById("time2").addEventListener("click",(e) =>addReason2(e.target.value));


	function clearWait(value) {
		$('.wait-reason').remove()
	}

	function clearTime(value) {
		$('.time-reason').remove()
	}

	function addReason(value) {
		$('.wait-reason').remove()
		if (value == ">45 min") {
			const html = document.getElementById('wait').parentElement
			html.insertAdjacentHTML('beforeend','<div class="wait-reason"><br><label>Please elaborate:&nbsp;</label><input type="text" name="feedback[waitelaborate]"></div>')
		}
	}

	function addReason2(value) {
		$('.time-reason').remove()
		if (value == ">45 min") {
			const html = document.getElementById('time').parentElement
			html.insertAdjacentHTML('beforeend','<div class="time-reason"><br><label>Please elaborate:&nbsp;</label><input type="text" name="feedback[timeelaborate]"></div>')
		}
	}

	function changeQuestionText(text) {
		document.querySelector(".feedback5").innerText = `Time spent waiting for the ${text} of ammunition after booking in from guardroom`;
		document.querySelector(".feedback6").innerText = `Time spent for the ${text} of ammunition after booking in from guardroom`;
		if (text == 'Collection'){
			feedback7text = 'collected';
		} else {
			feedback7text = 'returned';
		}
		document.querySelector(".feedback7").innerText = `No. of line items ${feedback7text}`;
	}
	
</script>
<script>
// Variable declarations
	const formInputs = Object.fromEntries(
		Array.from(document.querySelectorAll("#particulars-form input, #particulars-form select")).map((element) => [element.id, element])
	),
		feedbackInputs = Object.fromEntries(
			Array.from(document.querySelectorAll("[name^='feedback[']")).map((element) => [element.id, element])
		),
		{ comment, ...validationLabels } = Object.fromEntries(
			Array.from(document.querySelectorAll("[name^='feedback[']")).map((element) => {
				if (element.type === "radio") return [element.id, element.parentNode.querySelector("label[for=" + element.id + "]")];
				else return [element.id, element];
			})
		),
		{
			nric_invalid_feedback, signature_clear, progress_bar, particulars_submit,
			submit,
			scan_input,
			loading_modal
		} = Object.fromEntries(
			Array.from(document.querySelectorAll("[id]")).map((element) => [element.id.replace(/-/g, "_"), element])
		),
		signature_canvas = document.getElementById("sig-canvas");

	const bsLoadingModal = new bootstrap.Modal(loading_modal, {});

// Function definitions
	const upper = (event) => event.value = event.value.toUpperCase();
	
// Client-side form validation
	const regExPatterns = {
		nric: /^[STFG]\d{7}[A-Z]$/i,
		fullName: /^\w+([\w ]+)*$/i,
		dept: /^\w+([\w ]+)*$/i,
		contact: /^(6|8|9)\d{7}$/i
	}

	const validateValue = (id, value) => regExPatterns[id].test(value);

	const validationState = (boolean) => {
		return boolean ? "is-valid" : "is-invalid";
	}

	const checkValidation = (id, value) => {
		switch (id) {
			case "nric":
			case "fullName":
			case "dept":
			case "contact":
				return `form-control ${validationState(validateValue(id, value))}`;
			case "timeIn":
			case "timeOut":
			case "signature":
			case "serviceComment":
			case "paperworkComment":
			case "comment":
				return `form-control ${validationState(value !== "")}`;
			case "purpose":
				return `form-select ${validationState(value !== "")}`;
			default:
				return "";
		}
	}

	const isValidCount = (elementArr) => {
		return elementArr.filter((element) => element.classList.contains("is-valid")).length;
	}

	const submitProgress = () => {
		particulars_submit.disabled = !Object.values(formInputs).every((element) => element.classList.contains("is-valid"));

		const { timeIn, timeOut, ...inputsObj } = formInputs;

		const inputsArr = Object.values(inputsObj);

		const validCount = isValidCount(inputsArr),
			totalCount = inputsArr.length;
		
		progress_bar.style.width = `${validCount / totalCount * 100}%`;
	}

	const validate = (id) => {
		formInputs[id].className = checkValidation(id, formInputs[id].value);
		submitProgress();
	}

// Checkout autofill scripting
	const nullEntry = {
		fullName: "",
		dept: "",
		contact: "",
		purpose: "",
		timeIn: ""
	}

	const getData = async (nric) => {
		const res = await fetch("/checkout/autofill", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ nric: nric.toUpperCase() })
		});
		
		return await res.json();
	}

	const autofill = (obj) => {
		Object.keys(nullEntry).forEach((id) => {
			formInputs[id].value = obj[id];
			formInputs[id].className = obj === nullEntry ? "form-control" : checkValidation(id, obj[id]);
		});

		submitProgress();
		bsLoadingModal.hide()
	}

	const loadData = (value) => {
		bsLoadingModal.show();

		loading_modal.addEventListener("shown.bs.modal", () => {
			const promise = getData(value);
	
			promise.then((data) => {
				if (!data) {
					nric_invalid_feedback.innerHTML = "<strong>Invalid NRIC!</strong>";
					nric.className = `form-control ${validationState(false)}`;
					data = nullEntry;
				}
				autofill(data);
			});
		});
	}

	const checkData = (nric) => {
		const nricValue = nric.value;

		if (nricValue.length < 9) {
			if (nricValue === 0) nric.className = "form-control";
			nric_invalid_feedback.innerHTML = "Please enter <strong>Full <u>Unmasked</u></strong> NRIC (e.g. 'S1234567A').";
			autofill(nullEntry)
		} else {
			document.activeElement.blur();
			loadData(nricValue);
		}
	}

// Canvas scripting
	const initializeCanvas = () => {
		signature_canvas.width = signature_clear.offsetWidth;
		signature_canvas.height = signature_clear.offsetWidth / 4 * 3;
	}

	const clearCanvas = () => {
		initializeCanvas();
		formInputs.signature.value = "";
		validate(formInputs.signature.id);
	}

	const processCanvas = () => {
		signature.value = signature_canvas.toDataURL();
		validate(formInputs.signature.id);
	}

// Feedback form validation
	const radioTextPairs = {
		"feedback[service]": {
			input: feedbackInputs.serviceComment,
			valid: "Yes"
		},
		"feedback[paperwork]": {
			input: feedbackInputs.paperworkComment,
			valid: "Yes"
		}
	}

	const commentValidation = (element) => element.className = element.type === "hidden" ? "form-control is-valid" : `mt-1 ${checkValidation(element.id, element.value)}`; // If hidden, comment is not required and is always valid

	const inputState = (element) => {
		const checkedRadio = element.parentNode.querySelector(`input[name='${element.name}']:checked`),
			pair = radioTextPairs[element.name];

		if (checkedRadio) {
			pair.input.type = pair.valid === checkedRadio.value ? "hidden" : "text";
			commentValidation(pair.input);
		}
	}

	const radioValidation = (element) => validationLabels[element.id].className = `btn btn-outline-${element.checked ? "light form-control is-valid selectedRadio" : "dark"}`;

	const validateFeedback = (element) => {
		Object.values(feedbackInputs).forEach((input) => input.type === "radio" ? radioValidation(input) : null);

		if (element.name in radioTextPairs) inputState(element);
		else if (element === comment) comment.className = checkValidation("comment", comment.value);
		else if (element.type === "text") commentValidation(element);

		submit.disabled = isValidCount(Object.values(validationLabels)) < 8;
	}

// Initialize values
	formInputs.timeOut.value = moment().format("DD-MM-YYYY HH:mm");
	validate(formInputs.timeOut.id);

	initializeCanvas();

// Event listeners
	scan_input.addEventListener("keyup", () => {
		setTimeout(() => {
			bsScanModal.hide();
			const scanArr = scan_input.value.split("");
			if (scanArr.length >= 9) {
				formInputs.nric.value = scanArr.slice(0, 10).join("");
				validate(formInputs.nric.id);
				parseData(formInputs.nric);
			}
		}, 500);
	});
	
	Object.keys(formInputs).forEach((id) => {
		formInputs[id].addEventListener("keyup", () => {
			validate(id);
			if (id === "nric") checkData(formInputs.nric);
		});
	});

	signature_clear.addEventListener("click", () => clearCanvas());

	signature_canvas.addEventListener("mouseup", () => processCanvas());

	Object.values(feedbackInputs).forEach((element) => {
		["input", "click"].forEach((type) => element.addEventListener(type, () => validateFeedback(element)))
	});
</script>